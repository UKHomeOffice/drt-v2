# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
+ nocsrf
POST          /report-to                                                              controllers.CSPReportController.report
GET           /                                                                       controllers.Application.index
GET           /health-check                                                           controllers.Application.healthCheck
GET           /health-check/received-api/:from/:to/:minimumToConsider                 controllers.application.HealthCheckController.receivedLiveApiData(from: String, to: String, minimumToConsider: Int)
GET           /health-check/received-landing-times/:from/:to/:minimumToConsider       controllers.application.HealthCheckController.receivedLandingTimes(from: String, to: String, minimumToConsider: Int)
GET           /health-check/received-arrival-updates/:from/:to/:minimumToConsider/:lastUpdatedMinutes  controllers.application.HealthCheckController.receivedUpdates(from: String, to: String, minimumToConsider: Int, lastUpdatedMinutes: Int)
GET           /health-check/calculated-desk-updates                                   controllers.application.HealthCheckController.deskUpdates()

GET           /airport-config                                                         controllers.application.ConfigController.getAirportConfig
GET           /pax-feed-source-order                                                  controllers.application.ConfigController.getPaxFeedSourceOrder
GET           /contact-details                                                        controllers.application.ContactDetailsController.getContactDetails

GET           /ooh-status                                                             controllers.application.ContactDetailsController.getOOHStatus
GET           /feature-flags                                                          controllers.application.FeatureFlagsController.getFeatureFlags

GET           /airport-info                                                           controllers.application.AirportInfoController.getAirportInfo
GET           /walk-times                                                             controllers.application.WalkTimeController.getWalkTimes

GET           /alerts/:createdAfter                                                   controllers.application.AlertsController.getAlerts(createdAfter: Long)
+ nocsrf
POST          /alerts                                                                 controllers.application.AlertsController.addAlert
+ nocsrf
DELETE        /alerts                                                                 controllers.application.AlertsController.deleteAlerts

GET           /version                                                                controllers.application.ApplicationInfoController.getApplicationVersion

GET           /crunch                                                                 controllers.application.PortStateController.getCrunch
POST          /control/splits/recalculate                                             controllers.application.PortStateController.recalculateSplits
POST          /control/historic-splits/lookup-missing                                 controllers.application.PortStateController.lookupMissingHistoricSplits
POST          /control/pax-nos/lookup-missing                                         controllers.application.PortStateController.lookupMissingPaxNos
POST          /control/pax-loads/recalculate/:startLocalDate/:endLocalDate            controllers.application.PortStateController.recalculatePaxLoads(startLocalDate: String, endLocalDate: String)
POST          /control/desk-recs/recalculate/:startLocalDate/:endLocalDate            controllers.application.PortStateController.recalculateDeskRecs(startLocalDate: String, endLocalDate: String)

+ nocsrf
POST          /control/data-retention/purge/:startUtcDate                             controllers.application.DataRetentionController.purge(startUtcDate: String)

POST          /control/arrivals/recalculate                                           controllers.application.PortStateController.reCalculateArrivals
GET           /crunch-snapshot/:pit                                                   controllers.application.PortStateController.getCrunchSnapshot(pit: Long)

GET           /feed-statuses                                                          controllers.application.FeedsController.getFeedStatuses
GET           /feeds/statuses                                                         controllers.application.FeedsController.getFeedStatuses
POST          /feeds/check                                                            controllers.application.FeedsController.checkFeed
GET           /arrival/:number/:terminal/:scheduled/:origin                           controllers.application.FeedsController.getArrival(number: Int, terminal: String, scheduled: Long, origin: String)
GET           /arrival/:pointInTime/:number/:terminal/:scheduled/:origin              controllers.application.FeedsController.getArrivalAtPointInTime(pointInTime: Long, number: Int, terminal: String, scheduled: Long, origin: String)
GET           /manifest-summaries                                                     controllers.application.ManifestsController.getManifestSummariesForArrivals
GET           /manifest-summaries/:utcDate/summary                                    controllers.application.ManifestsController.getManifestSummariesForDay(utcDate: String)
GET           /red-list/ports/:date                                                   controllers.application.RedListsController.getRedListPorts(date: String)
GET           /red-list/updates                                                       controllers.application.RedListsController.getRedListUpdates
GET           /red-list/updates-legacy                                                controllers.application.RedListsController.getRedListUpdatesLegacy
POST          /egate-banks/updates                                                    controllers.application.EgateBanksController.updateEgateBanksUpdates
GET           /egate-banks/updates                                                    controllers.application.EgateBanksController.getEgateBanksUpdates
DELETE        /egate-banks/updates/:terminal/:effectiveFrom                           controllers.application.EgateBanksController.deleteEgateBanksUpdates(terminal: String, effectiveFrom: Long)
POST          /sla-configs                                                            controllers.application.SlaConfigsController.updateSlaConfig
GET           /sla-configs                                                            controllers.application.SlaConfigsController.getSlaConfigs
DELETE        /sla-configs/:effectiveFrom                                             controllers.application.SlaConfigsController.removeSlaConfig(effectiveFrom: Long)

GET           /logged-in                                                              controllers.Application.isLoggedIn
GET           /fixed-points                                                           controllers.application.StaffingController.getFixedPoints
POST          /fixed-points                                                           controllers.application.StaffingController.saveFixedPoints
POST          /shifts/save                                                            controllers.application.ShiftsController.saveShifts
GET           /shifts/:port/:terminal                                                 controllers.application.ShiftsController.getShifts(port: String, terminal: String)
GET           /shifts/:port/:terminal/:shiftName                                      controllers.application.ShiftsController.getShift(port: String, terminal: String, shiftName: String)
POST          /staff-assignments                                                      controllers.application.ShiftAssignmentsController.saveShiftAssignments
GET           /staff-assignments                                                      controllers.application.ShiftAssignmentsController.getAllShiftAssignments
GET           /staff-assignments/:localDate                                           controllers.application.ShiftAssignmentsController.getShiftAssignmentsForDate(localDate: String)
+nocsrf
POST          /staff-assignments/migrate-legacy-staff-assignments                     controllers.application.LegacyShiftAssignmentsMigrationController.legacyToShiftAssignments

GET           /forecast-summary/:terminalName/:startDay/:periodInterval               controllers.application.PortStateController.forecastWeekSummary(terminalName: String, startDay: Long,periodInterval: Int)

GET           /export/desk-recs/:startLocalDate/:endLocalDate/:terminalName           controllers.application.exports.DesksExportController.recsBetweenTimeStampsCSV(startLocalDate, endLocalDate, terminalName)
GET           /export/recs-combined/:startLocalDate/:endLocalDate                     controllers.application.exports.DesksExportController.terminalsRecsBetweenTimeStampsCSV(startLocalDate, endLocalDate)
GET           /export/desk-recs/snapshot/:localDate/:pointInTime/:terminalName        controllers.application.exports.DesksExportController.recsAtPointInTimeCSV(localDate, pointInTime, terminalName)
GET           /export/recs-combined/snapshot/:localDate/:pointInTime/                 controllers.application.exports.DesksExportController.terminalsRecsAtPointInTimeCSV(localDate, pointInTime)
GET           /export/desk-deps/:startLocalDate/:endLocalDate/:terminalName           controllers.application.exports.DesksExportController.depsBetweenTimeStampsCSV(startLocalDate, endLocalDate, terminalName)
GET           /export/deps-combined/:startLocalDate/:endLocalDate                     controllers.application.exports.DesksExportController.depsTerminalsBetweenTimeStampsCSV(startLocalDate, endLocalDate)
GET           /export/desk-deps/snapshot/:localDate/:pointInTime/:terminalName        controllers.application.exports.DesksExportController.depsAtPointInTimeCSV(localDate, pointInTime, terminalName)
GET           /export/deps-combined/snapshot/:localDate/:pointInTime                  controllers.application.exports.DesksExportController.terminalsDepsAtPointInTimeCSV(localDate, pointInTime)
GET           /export/arrivals/:startLocalDay/:endLocalDay/:terminalName              controllers.application.exports.FlightsExportController.exportTerminalFlightsWithSplitsForDateRangeCSV(startLocalDay: String, endLocalDay: String, terminalName: String)
GET           /export/arrivals-combined/:startLocalDay/:endLocalDay                   controllers.application.exports.FlightsExportController.exportFlightsWithSplitsForDateRangeCSV(startLocalDay: String, endLocalDay: String)
GET           /export/arrivals/snapshot/:localDate/:pointInTime/:terminalName         controllers.application.exports.FlightsExportController.exportFlightsWithSplitsForDayAtPointInTimeCSV(localDate: String, pointInTime: Long, terminalName: String)
GET           /export/arrivals-combined/snapshot/:localDate/:pointInTime              controllers.application.exports.FlightsExportController.exportFlightsWithSplitsTerminalsForDayAtPointInTimeCSV(localDate: String, pointInTime: Long)

GET           /export/arrivals-feed/:terminal/:start/:end/:feedSource                 controllers.application.exports.FlightsExportController.exportArrivalsFromFeed(terminal: String, start: Long, end: Long, feedSource: String)
GET           /export/planning/:weekStarting/:terminalName                            controllers.application.ExportsController.exportForecastWeekToCSV(weekStarting, terminalName)
GET           /export/headlines/:weekStarting/:terminalName                           controllers.application.ExportsController.exportForecastWeekHeadlinesToCSV(weekStarting, terminalName)
GET           /export/users                                                           controllers.application.ExportsController.exportUsers
GET           /export/staff-movements/:date/:terminal                                 controllers.application.StaffingController.exportStaffMovements(terminal: String, date: String)
GET           /export/port-config                                                     controllers.application.ExportPortConfigController.exportConfig
GET           /export/desk-rec-simulation                                             controllers.application.SimulationsController.simulationExport
GET           /desk-rec-simulation                                                    controllers.application.SimulationsController.simulation
+ nocsrf
PUT           /egate-uptake-simulation/:terminalName/:startDate/:endDate/:uptakePercentage  controllers.application.SimulationsController.doEgateSimulation(terminalName: String, startDate: String, endDate: String, uptakePercentage: Double)
GET           /egate-uptake-simulation/:uuid                                          controllers.application.SimulationsController.getEgateSimulation(uuid: String)
GET           /egate-optimise/:terminalName/:startDate/:endDate                       controllers.application.SimulationsController.optimiseEgates(terminalName: String, startDate: String, endDate: String)

GET           /forecast-accuracy/compare/:modelNames/:terminalName/:startDate/:endDate  controllers.application.ForecastAccuracyController.forecastModelComparison(modelNames: String, terminalName: String, startDate: String, endDate: String)
GET           /forecast-accuracy/:date                                                controllers.application.ForecastAccuracyController.getForecastAccuracy(date: String)
GET           /export/forecast-accuracy/:daysForComparison/:daysAhead                 controllers.application.ForecastAccuracyController.forecastAccuracyExport(daysForComparison: Int, daysAhead: Int)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/fonts/*file                                                     controllers.Assets.at(path="/public/lib/font-awesome/fonts", file)
GET           /assets/images/*file                                                    controllers.Assets.at(path="/public/images", file)
GET           /assets/*file                                                           controllers.Assets.versioned(path="/public", file: Asset)

GET           /data/user                                                              controllers.Application.getLoggedInUser

GET           /data/track-user                                                        controllers.Application.trackUser

POST          /data/close-banner                                                      controllers.Application.closeBanner

GET           /data/should-user-view-banner                                           controllers.Application.shouldUserViewBanner

GET           /data/user-preferences                                                  controllers.Application.userPreferences
POST          /data/user-preferences                                                  controllers.Application.setUserPreferences

+ nocsrf
POST          /data/login                                                             controllers.Application.apiLogin

GET           /data/userDetails/:email                                                controllers.Application.userDetails(email:String)

POST          /data/addUserToGroup/:userId/:group                                     controllers.Application.addUserToGroup(userId: String, group: String)

GET           /data/user/has-port-access                                              controllers.Application.getUserHasPortAccess

GET           /data/actor-tree                                                        controllers.application.DebugController.getActorTree

# v2 exports
GET           /api/passengers/:startLocalDate/:endLocalDate                           controllers.application.SummariesController.exportPassengersByPortForDateRangeApi(startLocalDate: String, endLocalDate: String)
GET           /api/passengers/:startLocalDate/:endLocalDate/:terminalName             controllers.application.SummariesController.exportPassengersByTerminalForDateRangeApi(startLocalDate: String, endLocalDate: String, terminalName: String)
+ nocsrf
PUT           /api/passengers/:startDate/:endDate                                     controllers.application.SummariesController.populatePassengersForDate(startDate: String, endDate: String)

+ nocsrf
PUT           /api/v1/queues/:startDateLocal/:endDateLocal                            controllers.application.api.v1.QueuesApiController.populateQueues(startDateLocal: String, endDateLocal: String)

+ nocsrf
PUT           /api/v1/flights/:startDateUtc/:endDateUtc                           controllers.application.api.v1.FlightsApiController.populateFlights(startDateUtc: String, endDateUtc: String)

GET           /debug/flights/:persistenceId/:dateString/:messages                     controllers.application.DebugController.getMessagesForFlightPersistenceIdAtTime(persistenceId: String, dateString: String, messages: Int)
POST          /email/feedback/:feedback                                               controllers.application.EmailNotificationController.feedBack(feedback: String)
# Logging
+ nocsrf
POST          /logging                                                                controllers.Application.logging

GET           /staff-movements/:date                                                  controllers.application.StaffingController.getStaffMovements(date: String)
POST          /staff-movements                                                        controllers.application.StaffingController.addStaffMovements
DELETE        /staff-movements/:uuid                                                  controllers.application.StaffingController.removeStaffMovements(uuid: String)

# Feed import
POST          /data/feed/red-list-counts                                              controllers.application.ImportsController.feedImportRedListCounts
+ nocsrf
POST          /data/feed/:feedType/:portCode                                          controllers.application.ImportsController.feedImport(feedType: String, portCode: String)
# Training
GET           /feature-guide-video/:filename                                          controllers.S3FileController.getFile(filename:String)

GET           /drop-ins                                                               controllers.application.DropInsController.dropIns()
+ nocsrf
POST          /drop-in-registrations                                                  controllers.application.DropInsController.createDropInRegistration()

GET           /drop-in-registrations                                                  controllers.application.DropInsController.getDropInRegistrations

GET           /user-feedback                                                          controllers.application.UserFeedbackController.getUserFeedback

GET           /ab-feature/:functionName                                               controllers.application.ABFeatureController.getABFeature(functionName: String)

GET           /feature-guides                                                         controllers.Application.featureGuides()

GET           /is-new-feature-available-since-last-login                              controllers.Application.isNewFeatureAvailableSinceLastLogin

POST          /record-feature-guide-view/:filename                                    controllers.Application.recordFeatureGuideView(filename:String)

GET           /viewed-feature-guides                                                  controllers.Application.viewedFeatureGuideIds
