import React from 'react';
/**
 * Warning message for the `autoRowSize`/`autoColumnSize` compatibility check.
 */
export declare const AUTOSIZE_WARNING: string;
/**
 * Filter out and return elements of the provided `type` from the `HotColumn` component's children.
 *
 * @param {React.ReactNode} children HotTable children array.
 * @param {String} type Either `'hot-renderer'` or `'hot-editor'`.
 * @returns {Object|null} A child (React node) or `null`, if no child of that type was found.
 */
export declare function getChildElementByType(children: React.ReactNode, type: string): React.ReactElement | null;
/**
 * Get the component node name.
 *
 * @param {React.ReactElement} componentNode
 * @returns {String} Provided component's name.
 */
export declare function getComponentNodeName(componentNode: React.ReactElement): string;
/**
 * Remove editor containers from DOM.
 *
 * @param [doc] Document to be used.
 */
export declare function removeEditorContainers(doc?: Document): void;
/**
 * Create an editor portal.
 *
 * @param {React.ReactElement} editorElement Editor's element.
 * @returns {React.ReactPortal} The portal for the editor.
 */
export declare function createEditorPortal(editorElement: React.ReactElement): React.ReactPortal;
/**
 * Get an editor element extended with a instance-emitting method.
 *
 * @param {React.ReactNode} children Component children.
 * @param {Map} editorCache Component's editor cache.
 * @returns {React.ReactElement} An editor element containing the additional methods.
 */
export declare function getExtendedEditorElement(children: React.ReactNode, editorCache: Map<string, object>): React.ReactElement | null;
/**
 * Create a react component and render it to an external DOM done.
 *
 * @param {React.ReactElement} rElement React element to be used as a base for the component.
 * @param {Object} props Props to be passed to the cloned element.
 * @param {Function} callback Callback to be called after the component has been mounted.
 * @param {Document} [ownerDocument] The owner document to set the portal up into.
 * @returns {{portal: React.ReactPortal, portalContainer: HTMLElement}} An object containing the portal and its container.
 */
export declare function createPortal(rElement: React.ReactElement, props: any, callback: Function, ownerDocument?: Document): {
    portal: React.ReactPortal;
    portalContainer: HTMLElement;
};
/**
 * Add the `UNSAFE_` prefixes to the deprecated lifecycle methods for React >= 16.3.
 *
 * @param {Function} Klass Class to have the methods renamed.
 * @returns {Function} Class with the renamed methods.
 */
export declare function addUnsafePrefixes<T extends any>(Klass: T): T;
