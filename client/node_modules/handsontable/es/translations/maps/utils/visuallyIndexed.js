import "core-js/modules/es.symbol";
import "core-js/modules/es.symbol.description";
import "core-js/modules/es.symbol.iterator";
import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.from";
import "core-js/modules/es.array.includes";
import "core-js/modules/es.array.iterator";
import "core-js/modules/es.array.slice";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/es.string.includes";
import "core-js/modules/es.string.iterator";
import "core-js/modules/web.dom-collections.iterator";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { arrayFilter } from '../../../helpers/array';
/**
 * Insert new indexes to the list.
 *
 * @private
 * @param {Array} indexesList List of indexes.
 * @param {Number} insertionIndex Position inside the actual list.
 * @param {Array} insertedIndexes List of inserted indexes.
 */

export function getListWithInsertedItems(indexesList, insertionIndex, insertedIndexes) {
  return [].concat(_toConsumableArray(indexesList.slice(0, insertionIndex)), _toConsumableArray(insertedIndexes), _toConsumableArray(indexesList.slice(insertionIndex)));
}
/**
 * Filter indexes from the list.
 *
 * @private
 * @param {Array} indexesList List of indexes.
 * @param {Array} removedIndexes List of removed indexes.
 */

export function getListWithRemovedItems(indexesList, removedIndexes) {
  return arrayFilter(indexesList, function (index) {
    return removedIndexes.includes(index) === false;
  });
}