import "core-js/modules/es.array.slice";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { rangeEach } from '../../helpers/number';
import { mixin } from '../../helpers/object';
import { isFunction } from '../../helpers/function';
import localHooks from '../../mixins/localHooks';
/**
 * Map for storing mappings from an index to a value.
 */

var BaseMap =
/*#__PURE__*/
function () {
  function BaseMap() {
    var initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, BaseMap);

    this.list = [];
    this.initValueOrFn = initValueOrFn;
  }
  /**
   * Initialize list with default values for particular indexes.
   *
   * @param {Number} length New length of list.
   */


  _createClass(BaseMap, [{
    key: "init",
    value: function init(length) {
      this.setDefaultValues(length);
      this.runLocalHooks('init');
      return this;
    }
    /**
     * Get full list of values for particular indexes.
     *
     * @returns {Array}
     */

  }, {
    key: "getValues",
    value: function getValues() {
      return this.list;
    }
    /**
     * Get value for the particular index.
     *
     * @param {Number} index
     * @returns {*}
     */

  }, {
    key: "getValueAtIndex",
    value: function getValueAtIndex(index) {
      var values = this.getValues();

      if (index < values.length) {
        return values[index];
      }
    }
    /**
     * Set new values for particular indexes.
     *
     * @param {Array} values List of set values.
     */

  }, {
    key: "setValues",
    value: function setValues(values) {
      this.list = values.slice();
      this.runLocalHooks('change');
    }
    /**
     * Set new value for the particular index.
     *
     * @param {Number} index
     * @param {*} value
     * @returns {Boolean}
     */

  }, {
    key: "setValueAtIndex",
    value: function setValueAtIndex(index, value) {
      if (index < this.getLength()) {
        this.list[index] = value;
        this.runLocalHooks('change');
        return true;
      }

      return false;
    }
    /**
     * Clear all values to the defaults.
     */

  }, {
    key: "clear",
    value: function clear() {
      this.setDefaultValues();
    }
    /**
     * Get length of index map.
     *
     * @returns {Number}
     */

  }, {
    key: "getLength",
    value: function getLength() {
      return this.getValues().length;
    }
    /**
     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
     *
     * @private
     * @param {Number} [length] Length of list.
     */

  }, {
    key: "setDefaultValues",
    value: function setDefaultValues() {
      var _this = this;

      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.list.length;
      this.list.length = 0;

      if (isFunction(this.initValueOrFn)) {
        rangeEach(length - 1, function (index) {
          return _this.list.push(_this.initValueOrFn(index));
        });
      } else {
        rangeEach(length - 1, function () {
          return _this.list.push(_this.initValueOrFn);
        });
      }

      this.runLocalHooks('change');
    }
    /**
     * Add values to the list.
     *
     * @private
     */

  }, {
    key: "insert",
    value: function insert() {
      this.runLocalHooks('change');
    }
    /**
     * Remove values from the list.
     *
     * @private
     */

  }, {
    key: "remove",
    value: function remove() {
      this.runLocalHooks('change');
    }
  }]);

  return BaseMap;
}();

mixin(BaseMap, localHooks);
export default BaseMap;