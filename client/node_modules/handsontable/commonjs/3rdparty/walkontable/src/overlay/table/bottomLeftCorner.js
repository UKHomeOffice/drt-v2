"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

exports.__esModule = true;
exports.default = void 0;

var _base = _interopRequireDefault(require("./_base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var BottomLeftCornerOverlayTable =
/*#__PURE__*/
function (_OverlayTable) {
  _inherits(BottomLeftCornerOverlayTable, _OverlayTable);

  function BottomLeftCornerOverlayTable() {
    _classCallCheck(this, BottomLeftCornerOverlayTable);

    return _possibleConstructorReturn(this, _getPrototypeOf(BottomLeftCornerOverlayTable).apply(this, arguments));
  }

  _createClass(BottomLeftCornerOverlayTable, [{
    key: "getFirstRenderedRow",
    value: function getFirstRenderedRow() {
      var index = this.wot.getSetting('totalRows') - this.wot.getSetting('fixedRowsBottom');

      if (index < 0) {
        return -1;
      }

      return index;
    }
  }, {
    key: "getFirstVisibleRow",
    value: function getFirstVisibleRow() {
      return this.getFirstRenderedRow();
    }
  }, {
    key: "getFirstRenderedColumn",
    value: function getFirstRenderedColumn() {
      var totalColumns = this.wot.getSetting('totalColumns');

      if (totalColumns === 0) {
        return -1;
      }

      return 0;
    }
  }, {
    key: "getFirstVisibleColumn",
    value: function getFirstVisibleColumn() {
      return this.getFirstRenderedColumn();
    }
    /**
     * @returns {Number} Returns -1 if no row is visible, otherwise source index of the last rendered row
     */

  }, {
    key: "getLastRenderedRow",
    value: function getLastRenderedRow() {
      return this.wot.getSetting('totalRows') - 1;
    }
    /**
     * @returns {Number} Returns source index of last visible row
     */

  }, {
    key: "getLastVisibleRow",
    value: function getLastVisibleRow() {
      return this.getLastRenderedRow();
    }
  }, {
    key: "getLastRenderedColumn",
    value: function getLastRenderedColumn() {
      return this.getRenderedColumnsCount() - 1;
    }
  }, {
    key: "getLastVisibleColumn",
    value: function getLastVisibleColumn() {
      return this.getLastRenderedColumn();
    }
  }, {
    key: "getRenderedColumnsCount",
    value: function getRenderedColumnsCount() {
      var totalColumns = this.wot.getSetting('totalColumns');
      return Math.min(this.wot.getSetting('fixedColumnsLeft'), totalColumns);
    }
  }, {
    key: "getRenderedRowsCount",
    value: function getRenderedRowsCount() {
      var totalRows = this.wot.getSetting('totalRows');
      return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);
    }
  }, {
    key: "getVisibleRowsCount",
    value: function getVisibleRowsCount() {
      return this.getRenderedRowsCount();
    }
  }, {
    key: "getVisibleColumnsCount",
    value: function getVisibleColumnsCount() {
      return this.getRenderedColumnsCount();
    }
  }]);

  return BottomLeftCornerOverlayTable;
}(_base.default);

var _default = BottomLeftCornerOverlayTable;
exports.default = _default;