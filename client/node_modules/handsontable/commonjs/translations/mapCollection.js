"use strict";

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

exports.__esModule = true;
exports.getRegisteredMapsCounter = getRegisteredMapsCounter;
exports.default = void 0;

var _mixed = require("../helpers/mixed");

var _object = require("../helpers/object");

var _localHooks = _interopRequireDefault(require("../mixins/localHooks"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Counter for checking if there is a memory leak.
var registeredMaps = 0;

var MapCollection =
/*#__PURE__*/
function () {
  function MapCollection() {
    _classCallCheck(this, MapCollection);

    this.mappings = new Map();
  }
  /**
   * Register custom index map.
   *
   * @param {String} uniqueName Unique name of the indexes list.
   * @param {BaseMap} map Map containing miscellaneous (i.e. meta data, indexes sequence), updated after remove and insert data actions.
   * @returns {BaseMap|undefined}
   */


  _createClass(MapCollection, [{
    key: "register",
    value: function register(uniqueName, map) {
      var _this = this;

      if (this.mappings.has(uniqueName) === false) {
        this.mappings.set(uniqueName, map);
        map.addLocalHook('change', function () {
          return _this.runLocalHooks('change', map);
        });
        registeredMaps += 1;
      }
    }
    /**
     * Unregister custom index map.
     *
     * @param {String} name Name of the indexes list.
     */

  }, {
    key: "unregister",
    value: function unregister(name) {
      var map = this.mappings.get(name);

      if ((0, _mixed.isDefined)(map)) {
        map.clearLocalHooks();
        this.mappings.delete(name);
        this.runLocalHooks('change', map);
        registeredMaps -= 1;
      }
    }
    /**
     * Get indexes list for provided index map name.
     *
     * @param {String} [name] Name of the indexes list.
     * @returns {Array|IndexMap}
     */

  }, {
    key: "get",
    value: function get(name) {
      if ((0, _mixed.isUndefined)(name)) {
        return Array.from(this.mappings.values());
      }

      return this.mappings.get(name);
    }
    /**
     * Get collection size.
     *
     * @returns {Number}
     */

  }, {
    key: "getLength",
    value: function getLength() {
      return this.mappings.size;
    }
    /**
     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */

  }, {
    key: "removeFromEvery",
    value: function removeFromEvery(removedIndexes) {
      this.mappings.forEach(function (list) {
        list.remove(removedIndexes);
      });
    }
    /**
     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.
     *
     * @private
     * @param {Number} firstInsertedVisualIndex First inserted visual index.
     * @param {Number} firstInsertedPhysicalIndex First inserted physical index.
     * @param {Number} amountOfIndexes Amount of inserted indexes.
     */

  }, {
    key: "insertToEvery",
    value: function insertToEvery(insertionIndex, insertedIndexes) {
      this.mappings.forEach(function (list) {
        list.insert(insertionIndex, insertedIndexes);
      });
    }
    /**
     * Set default values to index maps within collection.
     *
     * @param {Number} length Destination length for all stored index maps.
     */

  }, {
    key: "initEvery",
    value: function initEvery(length) {
      this.mappings.forEach(function (list) {
        list.init(length);
      });
    }
  }]);

  return MapCollection;
}();

(0, _object.mixin)(MapCollection, _localHooks.default);
var _default = MapCollection;
exports.default = _default;

function getRegisteredMapsCounter() {
  return registeredMaps;
}