"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.fill");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.includes");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

exports.__esModule = true;
exports.default = void 0;

var _array = require("./../helpers/array");

var _visuallyIndexed = require("./maps/utils/visuallyIndexed");

var _number = require("../helpers/number");

var _indexMap = _interopRequireDefault(require("./maps/indexMap"));

var _skipMap = _interopRequireDefault(require("./maps/skipMap"));

var _mapCollection = _interopRequireDefault(require("./mapCollection"));

var _localHooks = _interopRequireDefault(require("../mixins/localHooks"));

var _object = require("../helpers/object");

var _mixed = require("../helpers/mixed");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var IndexMapper =
/*#__PURE__*/
function () {
  function IndexMapper() {
    var _this = this;

    _classCallCheck(this, IndexMapper);

    /**
     * Map storing the sequence of indexes.
     *
     * @type {IndexMap}
     */
    this.indexesSequence = new _indexMap.default();
    /**
     * Collection for different skip maps. Indexes marked as skipped in any map won't be rendered.
     *
     * @type {MapCollection}
     */

    this.skipCollection = new _mapCollection.default();
    /**
     * Collection for another kind of mappings.
     *
     * @type {MapCollection}
     */

    this.variousMappingsCollection = new _mapCollection.default();
    /**
     * Cache for skip result for particular indexes.
     *
     * @type {Array}
     */

    this.flattenSkipList = [];
    /**
     * Cache for list of not skipped indexes, respecting the indexes sequence.
     *
     * @type {Array}
     */

    this.notSkippedIndexesCache = [];
    /**
     * Flag determining whether operations performed on index mapper were batched.
     *
     * @type {Boolean}
     */

    this.isBatched = false;
    /**
     * Flag determining whether any action on indexes sequence or skipped indexes was performed.
     *
     * @type {Boolean}
     */

    this.cachedIndexesChange = false;
    this.indexesSequence.addLocalHook('change', function () {
      _this.cachedIndexesChange = true; // Sequence of visible indexes might change.

      _this.updateCache();

      _this.runLocalHooks('change', _this.indexesSequence, null);
    });
    this.skipCollection.addLocalHook('change', function (changedMap) {
      _this.cachedIndexesChange = true; // Number of visible indexes might change.

      _this.updateCache();

      _this.runLocalHooks('change', changedMap, _this.skipCollection);
    });
    this.variousMappingsCollection.addLocalHook('change', function (changedMap) {
      _this.runLocalHooks('change', changedMap, _this.variousMappingsCollection);
    });
  }
  /**
   * Execute batch operations with updating cache.
   *
   * @param {Function} curriedBatchOperations Batched operations curried in a function.
   */


  _createClass(IndexMapper, [{
    key: "executeBatchOperations",
    value: function executeBatchOperations(curriedBatchOperations) {
      var actualFlag = this.isBatched;
      this.isBatched = true;
      curriedBatchOperations(this);
      this.isBatched = actualFlag;
      this.updateCache();
    }
    /**
     * Register map which provide some index mappings.
     *
     * @param {String} uniqueName Name of the map. It should be unique.
     * @param {ValueMap|IndexMap|SkipMap} mapper Register mapper updated on items removal and insertion.
     * @returns {ValueMap|IndexMap|SkipMap}
     */

  }, {
    key: "registerMap",
    value: function registerMap(uniqueName, map) {
      if (this.skipCollection.get(uniqueName) || this.variousMappingsCollection.get(uniqueName)) {
        throw Error("Mapper with name \"".concat(uniqueName, "\" is already registered."));
      }

      if (map instanceof _skipMap.default === true) {
        this.skipCollection.register(uniqueName, map);
      } else {
        this.variousMappingsCollection.register(uniqueName, map);
      }

      var numberOfIndexes = this.getNumberOfIndexes();
      /*
        We initialize map ony when we have full information about number of indexes and the dataset is not empty. Otherwise it's unnecessary. Initialization of empty array
        would not give any positive changes. After initializing it with number of indexes equal to 0 the map would be still empty. What's more there would be triggered
        not needed hook (no real change have occurred). Number of indexes is known after loading data (the `loadData` function from the `Core`).
       */

      if (numberOfIndexes > 0) {
        map.init(numberOfIndexes);
      }

      return map;
    }
    /**
     * Unregister a map with given name.
     *
     * @param {String} name Name of the map.
     */

  }, {
    key: "unregisterMap",
    value: function unregisterMap(name) {
      this.skipCollection.unregister(name);
      this.variousMappingsCollection.unregister(name);
    }
    /**
     * Get physical index by its visual index.
     *
     * @param {Number} visualIndex Visual index.
     * @return {Number|null} Returns translated index mapped by passed visual index.
     */

  }, {
    key: "getPhysicalIndex",
    value: function getPhysicalIndex(visualIndex) {
      var visibleIndexes = this.getNotSkippedIndexes();
      var numberOfVisibleIndexes = visibleIndexes.length;
      var physicalIndex = null;

      if (visualIndex < numberOfVisibleIndexes) {
        physicalIndex = visibleIndexes[visualIndex];
      }

      return physicalIndex;
    }
    /**
     * Get visual index by its physical index.
     *
     * @param {Number} physicalIndex Physical index to search.
     * @returns {Number|null} Returns a visual index of the index mapper.
     */

  }, {
    key: "getVisualIndex",
    value: function getVisualIndex(physicalIndex) {
      var visibleIndexes = this.getNotSkippedIndexes();
      var visualIndex = visibleIndexes.indexOf(physicalIndex);

      if (visualIndex !== -1) {
        return visualIndex;
      }

      return null;
    }
    /**
     * Set default values for all stored index maps.
     *
     * @param {Number} [length] Destination length for all stored index maps.
     */

  }, {
    key: "initToLength",
    value: function initToLength() {
      var _this2 = this;

      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getNumberOfIndexes();
      this.flattenSkipList = [];
      this.notSkippedIndexesCache = _toConsumableArray(new Array(length).keys());
      this.executeBatchOperations(function () {
        _this2.indexesSequence.init(length);

        _this2.skipCollection.initEvery(length);

        _this2.variousMappingsCollection.initEvery(length);
      });
      this.runLocalHooks('init');
    }
    /**
     * Get all indexes sequence.
     *
     * @returns {Array} Physical indexes.
     */

  }, {
    key: "getIndexesSequence",
    value: function getIndexesSequence() {
      return this.indexesSequence.getValues();
    }
    /**
     * Set completely new indexes sequence.
     *
     * @param {Array} indexes Physical indexes.
     */

  }, {
    key: "setIndexesSequence",
    value: function setIndexesSequence(indexes) {
      this.indexesSequence.setValues(indexes);
    }
    /**
     * Get all indexes NOT skipped in the process of rendering.
     *
     * @param {Boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} Physical indexes.
     */

  }, {
    key: "getNotSkippedIndexes",
    value: function getNotSkippedIndexes() {
      var _this3 = this;

      var readFromCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (readFromCache === true) {
        return this.notSkippedIndexesCache;
      }

      return (0, _array.arrayFilter)(this.getIndexesSequence(), function (index) {
        return _this3.isSkipped(index) === false;
      });
    }
    /**
     * Get length of all indexes NOT skipped in the process of rendering.
     *
     * @returns {Number}
     */

  }, {
    key: "getNotSkippedIndexesLength",
    value: function getNotSkippedIndexesLength() {
      return this.getNotSkippedIndexes().length;
    }
    /**
     * Get number of all indexes.
     *
     * @returns {Number}
     */

  }, {
    key: "getNumberOfIndexes",
    value: function getNumberOfIndexes() {
      return this.getIndexesSequence().length;
    }
    /**
     * Move indexes in the index mapper.
     *
     * @param {Number|Array} movedIndexes Visual index(es) to move.
     * @param {Number} finalIndex Visual index index being a start index for the moved element.
     */

  }, {
    key: "moveIndexes",
    value: function moveIndexes(movedIndexes, finalIndex) {
      var _this4 = this;

      if (typeof movedIndexes === 'number') {
        movedIndexes = [movedIndexes];
      }

      var physicalMovedIndexes = (0, _array.arrayMap)(movedIndexes, function (visualIndex) {
        return _this4.getPhysicalIndex(visualIndex);
      });
      var notSkippedIndexesLength = this.getNotSkippedIndexesLength();
      var movedIndexesLength = movedIndexes.length; // Removing indexes without re-indexing.

      var listWithRemovedItems = (0, _visuallyIndexed.getListWithRemovedItems)(this.getIndexesSequence(), physicalMovedIndexes); // When item(s) are moved after the last visible item we assign the last possible index.

      var destinationPosition = notSkippedIndexesLength - movedIndexesLength; // Otherwise, we find proper index for inserted item(s).

      if (finalIndex + movedIndexesLength < notSkippedIndexesLength) {
        // Physical index at final index position.
        var physicalIndex = listWithRemovedItems.filter(function (index) {
          return _this4.isSkipped(index) === false;
        })[finalIndex];
        destinationPosition = listWithRemovedItems.indexOf(physicalIndex);
      } // Adding indexes without re-indexing.


      this.setIndexesSequence((0, _visuallyIndexed.getListWithInsertedItems)(listWithRemovedItems, destinationPosition, physicalMovedIndexes));
    }
    /**
     * Get whether index is skipped in the process of rendering.
     *
     * @param {Number} physicalIndex Physical index.
     * @returns {Boolean}
     */

  }, {
    key: "isSkipped",
    value: function isSkipped(physicalIndex) {
      return this.getFlattenSkipList()[physicalIndex] || false;
    }
    /**
     * Insert new indexes and corresponding mapping and update values of the others, for all stored index maps.
     *
     * @private
     * @param {Number} firstInsertedVisualIndex First inserted visual index.
     * @param {Number} amountOfIndexes Amount of inserted indexes.
     */

  }, {
    key: "insertIndexes",
    value: function insertIndexes(firstInsertedVisualIndex, amountOfIndexes) {
      var _this5 = this;

      var nthVisibleIndex = this.getNotSkippedIndexes()[firstInsertedVisualIndex];
      var firstInsertedPhysicalIndex = (0, _mixed.isDefined)(nthVisibleIndex) ? nthVisibleIndex : this.getNumberOfIndexes();
      var insertionIndex = this.getIndexesSequence().includes(nthVisibleIndex) ? this.getIndexesSequence().indexOf(nthVisibleIndex) : this.getNumberOfIndexes();
      var insertedIndexes = (0, _array.arrayMap)(new Array(amountOfIndexes).fill(firstInsertedPhysicalIndex), function (nextIndex, stepsFromStart) {
        return nextIndex + stepsFromStart;
      });
      this.executeBatchOperations(function () {
        _this5.indexesSequence.insert(insertionIndex, insertedIndexes);

        _this5.skipCollection.insertToEvery(insertionIndex, insertedIndexes);

        _this5.variousMappingsCollection.insertToEvery(insertionIndex, insertedIndexes);
      });
    }
    /**
     * Remove some indexes and corresponding mappings and update values of the others, for all stored index maps.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */

  }, {
    key: "removeIndexes",
    value: function removeIndexes(removedIndexes) {
      var _this6 = this;

      this.executeBatchOperations(function () {
        _this6.indexesSequence.remove(removedIndexes);

        _this6.skipCollection.removeFromEvery(removedIndexes);

        _this6.variousMappingsCollection.removeFromEvery(removedIndexes);
      });
    }
    /**
     * Get list of values, which represent result if index was skipped in any of skip collections.
     *
     * @private
     * @param {Boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array}
     */

  }, {
    key: "getFlattenSkipList",
    value: function getFlattenSkipList() {
      var readFromCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (readFromCache === true) {
        return this.flattenSkipList;
      }

      if (this.skipCollection.getLength() === 0) {
        return [];
      }

      var result = [];
      var particularSkipsLists = (0, _array.arrayMap)(this.skipCollection.get(), function (skipList) {
        return skipList.getValues();
      });
      (0, _number.rangeEach)(this.indexesSequence.getLength(), function (physicalIndex) {
        result[physicalIndex] = particularSkipsLists.some(function (particularSkipsList) {
          return particularSkipsList[physicalIndex];
        });
      });
      return result;
    }
    /**
     * Rebuild cache for some indexes. Every action on indexes sequence or skipped indexes by default reset cache, thus batching some index maps actions is recommended.
     *
     * @private
     */

  }, {
    key: "updateCache",
    value: function updateCache() {
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (force === true || this.isBatched === false && this.cachedIndexesChange === true) {
        this.flattenSkipList = this.getFlattenSkipList(false);
        this.notSkippedIndexesCache = this.getNotSkippedIndexes(false);
        this.cachedIndexesChange = false;
        this.runLocalHooks('cacheUpdated');
      }
    }
  }]);

  return IndexMapper;
}();

(0, _object.mixin)(IndexMapper, _localHooks.default);
var _default = IndexMapper;
exports.default = _default;