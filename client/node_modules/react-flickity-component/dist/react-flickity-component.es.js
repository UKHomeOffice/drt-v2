import o, { Component as h } from "react";
import { createPortal as y } from "react-dom";
import a from "imagesloaded";
import s from "prop-types";
const u = !!(typeof window < "u" && window.document && window.document.createElement);
class r extends h {
  constructor(e) {
    super(e), this.state = {
      flickityReady: !1,
      flickityCreated: !1,
      cellCount: 0
    }, this.carousel = null, this.flkty = null;
  }
  static getDerivedStateFromProps(e, t) {
    const i = o.Children.count(e.children);
    return i !== t.cellCount ? { flickityReady: !1, cellCount: i } : null;
  }
  componentDidUpdate(e, t) {
    if (!this.flkty)
      return;
    const {
      children: i,
      options: { draggable: l, initialIndex: n },
      reloadOnUpdate: c,
      disableImagesLoaded: d
    } = this.props, { flickityReady: f } = this.state;
    if (c || !t.flickityReady && f) {
      const p = this.flkty.isActive;
      this.flkty.deactivate(), this.flkty.selectedIndex = n || 0, this.flkty.options.draggable = l === void 0 ? i ? i.length > 1 : !1 : l, p && this.flkty.activate(), !d && this.carousel && a(this.carousel, () => {
        this.flkty.reloadCells();
      });
    } else
      this.flkty.reloadCells();
  }
  async componentDidMount() {
    if (!u || !this.carousel)
      return null;
    const e = (await import("flickity")).default, { flickityRef: t, options: i } = this.props;
    this.flkty = new e(this.carousel, i), t && t(this.flkty), this.props.static ? this.setReady() : this.setState({ flickityCreated: !0 });
  }
  setReady() {
    if (this.state.flickityReady)
      return;
    const e = () => this.setState({ flickityReady: !0 });
    this.props.disableImagesLoaded ? e() : a(this.carousel, e);
  }
  renderPortal() {
    if (!this.carousel)
      return null;
    const e = this.carousel.querySelector(".flickity-slider");
    if (e) {
      const t = y(this.props.children, e);
      return setTimeout(() => this.setReady(), 0), t;
    }
  }
  render() {
    return o.createElement(
      this.props.elementType,
      {
        className: this.props.className,
        ref: (e) => {
          this.carousel = e;
        }
      },
      this.props.static ? this.props.children : this.renderPortal()
    );
  }
}
r.propTypes = {
  children: s.array,
  className: s.string,
  disableImagesLoaded: s.bool,
  elementType: s.string,
  flickityRef: s.func,
  options: s.object,
  reloadOnUpdate: s.bool,
  static: s.bool
};
r.defaultProps = {
  className: "",
  disableImagesLoaded: !1,
  elementType: "div",
  options: {},
  reloadOnUpdate: !1,
  static: !1
};
export {
  r as default
};
//# sourceMappingURL=react-flickity-component.es.js.map
