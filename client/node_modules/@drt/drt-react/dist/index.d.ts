import * as React from 'react';
import React__default from 'react';
import * as Icons from '@mui/icons-material';
import moment, { Moment } from 'moment';
import * as _emotion_styled from '@emotion/styled';
import * as _mui_system from '@mui/system';
import * as _mui_material_OverridableComponent from '@mui/material/OverridableComponent';
import * as _mui_material from '@mui/material';
import { TableCellProps } from '@mui/material';

type FormState = {
    showTransitPaxNumber: boolean;
    showNumberOfVisaNationals: boolean;
    requireAllSelected: boolean;
    flightNumber: string;
    selectedNationalities: Country[];
    selectedAgeGroups: string[];
    showFilters: boolean;
};
type Country = {
    name: string;
    code: string;
};
type SearchFilterPayload = {
    showTransitPaxNumber: boolean;
    showNumberOfVisaNationals: boolean;
    requireAllSelected: boolean;
    flightNumber: string;
    selectedNationalities: Country[];
    selectedAgeGroups: string[];
};
interface IFlightFlaggerFilters {
    nationalities: Country[];
    ageGroups: string[];
    submitCallback: (payload: SearchFilterPayload) => void;
    showAllCallback: (event: React__default.ChangeEvent<HTMLInputElement>) => void;
    onChangeInput: (searchTerm: string) => void;
    clearFiltersCallback: (payload: SearchFilterPayload) => void;
    maybeInitialState?: FormState;
}
declare const FlightFlaggerFilters: ({ nationalities, ageGroups, submitCallback, showAllCallback, onChangeInput, clearFiltersCallback, maybeInitialState, }: IFlightFlaggerFilters) => React__default.JSX.Element;

type FlightArrival = {
    highlights?: string[];
    flight: string;
    origin: string;
    country: string;
    gate: string | null;
    status: string | null;
    scheduled: string | null;
    expected: string | null;
    expPcp: string | null;
    expPcpPax: {
        confidence?: string;
        count?: number | null;
    };
    paxCounts: {
        confidence?: string;
        eGate?: number | null;
        eea?: number | null;
        nonEea?: number | null;
    };
};

interface IFlightFlagger {
    nationalities: Country[];
    ageGroups: string[];
    submitCallback: (payload: SearchFilterPayload) => void;
    flights: FlightArrival[];
    isLoading: boolean;
    maybeInitialFilterFormState?: FormState;
}
declare const FlightFlagger: ({ nationalities, ageGroups, submitCallback, flights, isLoading, maybeInitialFilterFormState }: IFlightFlagger) => React__default.JSX.Element;

interface IFlightHighlightChip {
    text: string;
}
declare const FlightHighlightChip: ({ text }: IFlightHighlightChip) => React__default.JSX.Element;

interface IStatusTag {
    type: string;
    text: string;
}
declare const StatusTag: ({ type, text }: IStatusTag) => React__default.JSX.Element;

type IconNames = keyof typeof Icons;

type MenuItem = {
    label: string;
    link: string;
    roles?: string[];
    icon?: IconNames | string;
};
interface IHeader {
    userRoles: string[];
    adminMenuItems: MenuItem[];
    leftMenuItems?: MenuItem[];
    rightMenuItems?: MenuItem[];
    portMenuItems: MenuItem[];
    initialSelectedPortMenuItem: string;
    maxWidth: string;
    routingFunction: (route: string) => void;
    logoutLink: () => void;
}
declare const Header: ({ userRoles, adminMenuItems, rightMenuItems, leftMenuItems, portMenuItems, initialSelectedPortMenuItem, maxWidth, routingFunction, logoutLink }: IHeader) => React__default.JSX.Element;

interface IStaffUpdateSuccess {
    staffNumber: number | null;
    message: string;
    closeHandler: () => void;
}
declare const StaffUpdateSuccess: ({ staffNumber, message, closeHandler }: IStaffUpdateSuccess) => React__default.JSX.Element;

type IUpdateStaffForTimeRangeData = {
    startDayAt: Moment;
    startTimeAt: Moment;
    endTimeAt: Moment;
    endDayAt: Moment;
    actualStaff: number;
};
interface IUpdateStaffForTimeRangeForm {
    ustd: IUpdateStaffForTimeRangeData;
    interval: number;
    handleSubmit: (ssf: IUpdateStaffForTimeRangeData) => void;
    cancelHandler: () => void;
}
declare const UpdateStaffForTimeRangeForm: ({ ustd, interval, handleSubmit, cancelHandler }: IUpdateStaffForTimeRangeForm) => React__default.JSX.Element;

declare enum DatasourceStatus {
    Estimate = "Estimate",
    PortForecast = "Port forecast",
    DRTForecast = "DRT forecast",
    PortLiveData = "Port live data",
    CarrierData = "Carrier data",
    TerminalAverageData = "Terminal average data",
    PastCarrierData = "Past carrier data",
    VerifiedCarrierData = "Verified carrier data"
}

interface IPaxDatasource {
    status: DatasourceStatus;
}
declare const PaxDatasource: ({ status }: IPaxDatasource) => React__default.JSX.Element;

interface IPaxHighlight {
    status: DatasourceStatus;
}
declare const PaxHighlight: ({ status }: IPaxHighlight) => React__default.JSX.Element;

declare enum PaxTimeRange {
    Next5Mins = "Next 5 Mins",
    Next5to10Mins = "Next 5 to 10 Mins",
    Next10to15Mins = "Next 10 to 15 Mins"
}
type PortQueue = {
    queueName: string;
    queueCount: number;
};
interface IPaxCard {
    queues: PortQueue[];
    timeRange: PaxTimeRange;
    startTime: Date;
    endTime: Date;
}
declare const PaxCard: ({ queues, timeRange, startTime, endTime }: IPaxCard) => React.JSX.Element;

declare enum PlaneStatus {
    Delayed = "Delayed",
    Cancelled = "Cancelled",
    Diverted = "Diverted",
    OnChocks = "On chocks",
    OnChocksDelayed = "On chocks (delayed)"
}
interface IPlaneStatusLabel {
    status: PlaneStatus;
}
declare const PlaneStatusLabel: ({ status }: IPlaneStatusLabel) => React.JSX.Element;

declare enum PaxSearchFormDay {
    Yesterday = "yesterday",
    Today = "today",
    Tomorrow = "tomorrow"
}
declare enum PaxSearchFormTime {
    Now = "now",
    Day = "24hour"
}
type PaxSearchFormState = {
    day?: PaxSearchFormDay;
    time?: PaxSearchFormTime;
    arrivalDate: moment.Moment;
    fromDate: moment.Moment;
    toDate: moment.Moment;
    timeMachine?: boolean;
};
type IPaxSearchForm = PaxSearchFormState & {
    onChange: (values: PaxSearchFormState) => void;
};
declare const PaxSearchForm: ({ day, time, arrivalDate, fromDate, toDate, timeMachine, onChange }: IPaxSearchForm) => React.JSX.Element;

interface IHighlight {
    color: string;
    text: string;
    tooltipText: string;
}
declare const Highlight: ({ color, text, tooltipText }: IHighlight) => React__default.JSX.Element;

interface IInfoTooltip {
    text: string;
}
declare const InfoTooltip: ({ text }: IInfoTooltip) => React__default.JSX.Element;

declare const StyledTableHeader: _emotion_styled.StyledComponent<_mui_material.TableHeadOwnProps & _mui_material_OverridableComponent.CommonProps & Omit<Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, "ref"> & {
    ref?: ((instance: HTMLTableSectionElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLTableSectionElement> | null | undefined;
}, "className" | "style" | "classes" | "children" | "sx"> & _mui_system.MUIStyledCommonProps<_mui_material.Theme> & {
    component?: React__default.ElementType;
}, {}, {}>;
declare const StyledTableHeaderCell: _emotion_styled.StyledComponent<TableCellProps & _mui_system.MUIStyledCommonProps<_mui_material.Theme>, {}, {}>;
declare const StyledTableBody: _emotion_styled.StyledComponent<_mui_material.TableBodyOwnProps & _mui_material_OverridableComponent.CommonProps & Omit<Omit<React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>, "ref"> & {
    ref?: ((instance: HTMLTableSectionElement | null) => void | React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[keyof React__default.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES]) | React__default.RefObject<HTMLTableSectionElement> | null | undefined;
}, "className" | "style" | "classes" | "children" | "sx"> & _mui_system.MUIStyledCommonProps<_mui_material.Theme> & {
    component?: React__default.ElementType;
}, {}, {}>;
declare const RelativeTableCell: _emotion_styled.StyledComponent<TableCellProps & _mui_system.MUIStyledCommonProps<_mui_material.Theme>, {}, {}>;
declare const CellHighlight: _emotion_styled.StyledComponent<_mui_system.MUIStyledCommonProps<_mui_material.Theme>, React__default.DetailedHTMLProps<React__default.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
interface ICellStatusHighlight {
    status: string;
}
declare const CellStatusHighlight: ({ status }: ICellStatusHighlight) => React__default.JSX.Element;

interface IAccessibilityStatementProps {
    accessibilityStatementUrl: string;
    teamEmail: string;
    sendReportProblemGaEvent: () => void;
    scrollSection: string;
}
declare const AccessibilityStatement: ({ accessibilityStatementUrl, teamEmail, sendReportProblemGaEvent, scrollSection }: IAccessibilityStatementProps) => React__default.JSX.Element;

interface BottomBarProps {
    email: string;
    onClickAccessibilityStatement: () => void;
    accessibilityStatementUrl: string;
    feedbackUrl: string;
}
declare const BottomBar: ({ email, onClickAccessibilityStatement, accessibilityStatementUrl, feedbackUrl }: BottomBarProps) => React__default.JSX.Element;

interface AddShiftBarProps {
    onClickGetStarted: () => void;
}
declare const AddShiftBar: ({ onClickGetStarted, }: AddShiftBarProps) => React__default.JSX.Element;

interface ShiftForm {
    id: number;
    name: string;
    startTime: string;
    endTime: string;
    defaultStaffNumber: number;
}
interface ShiftsFormProps {
    port: string;
    terminal: string;
    interval: number;
    shiftForms: ShiftForm[];
    confirmHandler: (shiftForms: ShiftForm[]) => void;
}
declare const AddShiftForm: ({ port, terminal, interval, shiftForms, confirmHandler }: ShiftsFormProps) => React__default.JSX.Element;

interface ViewDate {
    year: number;
    month: number;
    day: number;
}
interface ShiftDate {
    year: number;
    month: number;
    day: number;
    hour: number;
    minute: number;
}
interface ShiftSummary {
    name: string;
    startTime: string;
    endTime: string;
    defaultStaffNumber: number;
}
interface StaffTableEntry {
    column: number;
    row: number;
    name: string;
    staffNumber: number;
    startTime: ShiftDate;
    endTime: ShiftDate;
}
interface ShiftSummaryStaffing {
    index: number;
    shiftSummary: ShiftSummary;
    staffTableEntries: StaffTableEntry[];
}
interface ShiftHotTableViewProps {
    interval: number;
    dayRange: string;
    viewDate: ViewDate;
    shiftSummaries: ShiftSummaryStaffing[];
    handleSaveChanges: (shifts: ShiftSummaryStaffing[], changedAssignments: StaffTableEntry[]) => void;
}
declare const ShiftHotTableView: React__default.FC<ShiftHotTableViewProps>;

interface ShiftSummaryProps {
    shiftSummaries: ShiftSummary[];
}
declare const ShiftSummaryView: React__default.FC<ShiftSummaryProps>;

declare module '@mui/material/styles' {
    interface PaperVariants {
        appbar: React__default.CSSProperties;
    }
    interface PaperVariantsOptions {
        appbar?: React__default.CSSProperties;
    }
    interface TypographyVariants {
        portCode: React__default.CSSProperties;
        pageTitle: React__default.CSSProperties;
        logoTitle: React__default.CSSProperties;
        logoStrap: React__default.CSSProperties;
    }
    interface TypographyVariantsOptions {
        portCode?: React__default.CSSProperties;
        pageTitle?: React__default.CSSProperties;
        logoTitle?: React__default.CSSProperties;
        logoStrap?: React__default.CSSProperties;
    }
}
declare module '@mui/material/Paper' {
    interface PaperPropsVariantOverrides {
        appbar: true;
    }
}
declare module "@mui/material/Typography" {
    interface TypographyPropsVariantOverrides {
        portCode: true;
        pageTitle: true;
        logoTitle: true;
        logoStrap: true;
    }
}
declare const drtTheme: _mui_material.Theme;

export { AccessibilityStatement, AddShiftBar, AddShiftBarProps, AddShiftForm, BottomBar, BottomBarProps, CellHighlight, CellStatusHighlight, DatasourceStatus, FlightFlagger, FlightFlaggerFilters, FlightHighlightChip, Header, Highlight, IAccessibilityStatementProps, IFlightFlagger, IFlightFlaggerFilters, IFlightHighlightChip, IHeader, IHighlight, IInfoTooltip, IPaxCard, IPaxDatasource, IPaxHighlight, IPaxSearchForm, IPlaneStatusLabel, IStaffUpdateSuccess, IStatusTag, IUpdateStaffForTimeRangeData, IUpdateStaffForTimeRangeForm, InfoTooltip, MenuItem, PaxCard, PaxDatasource, PaxHighlight, PaxSearchForm, PaxSearchFormDay, PaxSearchFormState, PaxSearchFormTime, PaxTimeRange, PlaneStatus, PlaneStatusLabel, PortQueue, RelativeTableCell, ShiftDate, ShiftForm, ShiftHotTableView, ShiftHotTableViewProps, ShiftSummary, ShiftSummaryProps, ShiftSummaryStaffing, ShiftSummaryView, ShiftsFormProps, StaffTableEntry, StaffUpdateSuccess, StatusTag, StyledTableBody, StyledTableHeader, StyledTableHeaderCell, UpdateStaffForTimeRangeForm, drtTheme };
